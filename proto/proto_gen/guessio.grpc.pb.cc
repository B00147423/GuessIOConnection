// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: guessio.proto

#include "guessio.pb.h"
#include "guessio.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace guessio {

static const char* GuessService_method_names[] = {
  "/guessio.GuessService/JoinGame",
  "/guessio.GuessService/MakeGuess",
};

std::unique_ptr< GuessService::Stub> GuessService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GuessService::Stub> stub(new GuessService::Stub(channel, options));
  return stub;
}

GuessService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_JoinGame_(GuessService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeGuess_(GuessService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GuessService::Stub::JoinGame(::grpc::ClientContext* context, const ::guessio::JoinRequest& request, ::guessio::JoinReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::guessio::JoinRequest, ::guessio::JoinReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JoinGame_, context, request, response);
}

void GuessService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::guessio::JoinRequest* request, ::guessio::JoinReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::guessio::JoinRequest, ::guessio::JoinReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, std::move(f));
}

void GuessService::Stub::async::JoinGame(::grpc::ClientContext* context, const ::guessio::JoinRequest* request, ::guessio::JoinReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::guessio::JoinReply>* GuessService::Stub::PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::guessio::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::guessio::JoinReply, ::guessio::JoinRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JoinGame_, context, request);
}

::grpc::ClientAsyncResponseReader< ::guessio::JoinReply>* GuessService::Stub::AsyncJoinGameRaw(::grpc::ClientContext* context, const ::guessio::JoinRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJoinGameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status GuessService::Stub::MakeGuess(::grpc::ClientContext* context, const ::guessio::GuessRequest& request, ::guessio::GuessReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::guessio::GuessRequest, ::guessio::GuessReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MakeGuess_, context, request, response);
}

void GuessService::Stub::async::MakeGuess(::grpc::ClientContext* context, const ::guessio::GuessRequest* request, ::guessio::GuessReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::guessio::GuessRequest, ::guessio::GuessReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeGuess_, context, request, response, std::move(f));
}

void GuessService::Stub::async::MakeGuess(::grpc::ClientContext* context, const ::guessio::GuessRequest* request, ::guessio::GuessReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MakeGuess_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::guessio::GuessReply>* GuessService::Stub::PrepareAsyncMakeGuessRaw(::grpc::ClientContext* context, const ::guessio::GuessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::guessio::GuessReply, ::guessio::GuessRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MakeGuess_, context, request);
}

::grpc::ClientAsyncResponseReader< ::guessio::GuessReply>* GuessService::Stub::AsyncMakeGuessRaw(::grpc::ClientContext* context, const ::guessio::GuessRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMakeGuessRaw(context, request, cq);
  result->StartCall();
  return result;
}

GuessService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GuessService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GuessService::Service, ::guessio::JoinRequest, ::guessio::JoinReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GuessService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::guessio::JoinRequest* req,
             ::guessio::JoinReply* resp) {
               return service->JoinGame(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GuessService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GuessService::Service, ::guessio::GuessRequest, ::guessio::GuessReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GuessService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::guessio::GuessRequest* req,
             ::guessio::GuessReply* resp) {
               return service->MakeGuess(ctx, req, resp);
             }, this)));
}

GuessService::Service::~Service() {
}

::grpc::Status GuessService::Service::JoinGame(::grpc::ServerContext* context, const ::guessio::JoinRequest* request, ::guessio::JoinReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GuessService::Service::MakeGuess(::grpc::ServerContext* context, const ::guessio::GuessRequest* request, ::guessio::GuessReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace guessio

